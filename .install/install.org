#+title: emmet Arch Installation Manual

** Base Arch Install
TODO

** Core Package and Config Installation Script
Performing the following commands will set up the core packages of my system. The script assumes you are running as a normal (non-root) user with sudo priveleges, and will not work otherwise. The following sections install the core packages and install my dotfiles from this repo.

To run the script on a base arch install, use:
#+BEGIN_SRC shell :noeval
curl -sSL https://gitlab.com/librephoenix/dotfiles/-/raw/main/.install/install.sh | sh
#+END_SRC

Otherwise, the remainder of this literate org document explains the entire script:
#+BEGIN_SRC shell :tangle install.sh
#!/bin/sh

# emmet's Arch Config Installation Script

#+END_SRC
*** Package Lists
First, we make sure git is installed and we checkout my full dotfiles repository.
#+BEGIN_SRC shell :tangle install.sh
# make sure git is installed
sudo pacman -S --needed git

# checkout my full dotfiles repo
git clone --bare https://gitlab.com/librephoenix/dotfiles.git .dotfiles.git;
git --git-dir=$HOME/.dotfiles.git --work-tree=$HOME checkout;

#+END_SRC

Then, we begin by listing necessary packages from the standard Arch repositories, the AUR, and Flathub.  Packages can be changed or commented out if necessary.

Packages are organized by function.
#+BEGIN_SRC shell :tangle install.sh
# intialize package list bash arrays
archpackages=();
aurpackages=();
flatpackages=();

#+END_SRC

**** Browsers
#+BEGIN_SRC shell :tangle install.sh
    # browsers
    archpackages+=(
    qutebrowser
    luakit
    );

    aurpackages+=(
    brave-bin
    librewolf-bin);

#+END_SRC

**** Office
#+BEGIN_SRC shell :tangle install.sh
    # documents
    archpackages+=(
    libreoffice-still
    atril
    xournalpp
    );

    aurpackages+=(
    autokey-gtk
    );

    # mail
    archpackages+=(
    geary
    );

    aurpackages+=(
    protonmail-bridge-bin
    mu
    mbsync
    );

    # file sync
    archpackages+=(
    syncthing
    );

    aurpackages+=(
    syncthing-gtk-python3
    );
#+END_SRC

**** File Managers
#+BEGIN_SRC shell :tangle install.sh
    # file managers
    archpackages+=(
    ranger
    pcmanfm
    );

    # for ranger
    aurpackages+=(
    dragon-drop
    );

#+END_SRC

**** Media
#+BEGIN_SRC shell :tangle install.sh
    # media
    archpackages+=(

        # image editor(s)
        gimp
        krita

        # media players
        vlc
        mpv
        youtube-dl

        # 3d modelling and video editing
        blender

        # media recording
        cheese
        obs-studio

        # digital audio workstation
        lmms
    );

    aurpackages+=(
        # image viewers
        nsxiv

        # media players
        freetube-bin
        myuzi

        # media recording
        audio-recorder
    );

    flatpackages+=(
    com.discordapp.Discord
    );

#+END_SRC
**** Games
#+BEGIN_SRC shell :tangle install.sh
    # games and relevant apps
    archpackages+=(
    steam
    lutris
    retroarch
    retroarch-assets-ozone
    libretro-desmume
    libretro-genesis-plus-gx
    libretro-mgba
    );

    aurpackages+=(
    airshipper # veloren
    nbtexplorer-bin
    );

    flatpackages+=(
    com.mojang.Minecraft
    );

#+END_SRC

**** Shells
#+BEGIN_SRC shell :tangle install.sh
    # shells
    archpackages+=(
    zsh
    ##fish
    );

#+END_SRC
**** Terminal Emulators
#+BEGIN_SRC shell :tangle install.sh
    # terminal emulators
    archpackages+=(
    alacritty
    kitty
    );

#+END_SRC

**** Command Line Utilities
#+BEGIN_SRC shell :tangle install.sh
    # command line utilities
    archpackages+=(
    neofetch
    grep sed wget which
    bat exa fd bottom ripgrep
    pacman-contrib
    rsync
    systeroid
    tmux
    htop
    hwinfo
    unzip
    octave
    reflector
    brightnessctl
    );

    aurpackages+=(
    mimeo
    pandoc-bin
    );

#+END_SRC
**** Editors
#+BEGIN_SRC shell :tangle install.sh
    # editors
    archpackages+=(
    emacs-nativecomp
    vim
    );

    aurpackages+=(
    vim-plug);

#+END_SRC
**** Development
#+BEGIN_SRC shell :tangle install.sh
    # development packages

#+END_SRC
***** Android
#+BEGIN_SRC shell :tangle install.sh
        # android
        archpackages+=(
        android-tools
        android-udev
        );
#+END_SRC
***** CC
#+BEGIN_SRC shell :tangle install.sh
        # cc
        archpackages+=(
        gcc
        clang
        make
        cmake
        autoconf
        automake
        libtool
        );

#+END_SRC

***** Python
#+BEGIN_SRC shell :tangle install.sh
        # python
        archpackages+=(
        python
        python-pip
        );

#+END_SRC

***** Haskell
#+BEGIN_SRC shell :tangle install.sh
        # haskell
        aurpackages+=(
        haskell-language-server-static
        );

#+END_SRC

***** Java
#+BEGIN_SRC shell :tangle install.sh
        # java
        archpackages+=(
        jdk-openjdk
        jre-openjdk
        gradle
        );

#+END_SRC

***** Gamedev
#+BEGIN_SRC shell :tangle install.sh
        # gamedev
        archpackages+=(
        godot
        );

#+END_SRC
***** Other
#+BEGIN_SRC shell :tangle install.sh
        # other
        archpackages+=(
        texinfo
        libffi zlib # required to build xmonad + xmobar
        );

#+END_SRC
**** Fonts
#+BEGIN_SRC shell :tangle install.sh
    #fonts
    archpackages+=(
    ttf-font-awesome
    ttf-inconsolata
    ttf-nerd-fonts-symbols-mono
    ttf-ubuntu-font-family
    terminus-font
    );

    aurpackages+=(
    otf-inconsolata-powerline-git
    ttf-unifont
    );

#+END_SRC
**** Compositor and Desktop Utils
#+BEGIN_SRC shell :tangle install.sh
    # desktop utils
    archpackages+=(
    dmenu
    tint2
    nitrogen
    lxappearance
    mate-icon-theme
    );

    aurpackages+=(
    picom-jonaburg-git
    qt5-styleplugins
    qt5ct
    xwinwrap-git
    );
#+END_SRC

**** Graphical Display and X Utils
#+BEGIN_SRC shell :tangle install.sh
    # graphical display and X utils
    archpackages+=(
    xorg
    autorandr
    xorg-xinit
    ##xf86-video-vesa
    ##xf86-video-intel
    xf86-video-amdgpu
    xdotool
    xclip
    ddcutil
    );

    aurpackages+=(
    caffeine-ng
    sct
    );
#+END_SRC

**** Audio Server
#+BEGIN_SRC shell :tangle install.sh
    # pipewire for audio server
    archpackages+=(
    pipewire
    wireplumber
    helvum
    pipewire-alsa
    pipewire-pulse
    pavucontrol
    pipewire-jack
    );

#+END_SRC

**** Virtual Machines
#+BEGIN_SRC shell :tangle install.sh
    # virtual machines
    archpackages+=(
    libvirt
    virt-manager
    qemu-full
    lxc
    swtpm
    );

#+END_SRC

**** Core System Packages
#+BEGIN_SRC shell :tangle install.sh
    # core system packages
    archpackages+=(
    linux linux-firmware linux-headers
    base base-devel
    binutils
    git
    git-delta
    fakeroot
    dialog
    xdg-utils
    cups
    gparted
    flatpak
    );

    aurpackages+=(
    auto-cpufreq
    );

#+END_SRC

**** Security
#+BEGIN_SRC shell :tangle install.sh
    # security
    archpackages+=(
    xsecurelock xautolock
    ufw gufw
    yubikey-manager
    libsecret gnome-keyring seahorse
    keepassxc
    );

#+END_SRC

**** Networking Utils
#+BEGIN_SRC shell :tangle install.sh
    # networking
    archpackages+=(
    networkmanager
    network-manager-applet
    wireless_tools
    wpa_supplicant
    dhclient
    dnsmasq
    );

    aurpackages+=(
    protonvpn
    rdm-bin
    );

#+END_SRC
**** File Systems
#+BEGIN_SRC shell :tangle install.sh
    # file systems
    archpackages+=(
    dosfstools
    );

#+END_SRC
**** Microcode
#+BEGIN_SRC shell :tangle install.sh
    # microcode
    archpackages+=(
    ##intel-ucode
    amd-ucode
    );

#+END_SRC
*** Install Packages
Here, we begin by installing necessary packages from the standard Arch repositories.  Then, after the Arch packages are installed, paru is installed with relevant AUR packages.  Then, packages via Flatpak are installed.  Finally, stack is installed along with needed Haskell packages.

To complete the installation, packages not tracked by package managers are installed, including: Doom Emacs, Oh My Zsh + Zsh Plugins.
**** Arch Packages
#+BEGIN_SRC shell :tangle install.sh
# install arch packages
sudo pacman -S --needed --noconfirm "${archpackages[@]}";

#+END_SRC

**** Paru + AUR Packages
#+BEGIN_SRC shell :tangle install.sh
# install paru
sudo pacman -S --needed --noconfirm base-devel;
cd /tmp;
git clone https://aur.archlinux.org/paru.git;
cd paru;
makepkg -si;
cd ~;

# install aur packages
paru -S "${aurpackages[@]}";

#+END_SRC

**** Flatpaks
#+BEGIN_SRC shell :tangle install.sh
# install flatpaks
flatpak install "${flatpackages[@]}";

#+END_SRC
**** Stack Packages
***** Install Stack
#+BEGIN_SRC shell :tangle install.sh
# install stack
curl -sSL https://get.haskellstack.org/ | sh;

#+END_SRC
***** Install XMonad and XMobar plus extras
#+BEGIN_SRC shell :tangle install.sh
# install xmonad and xmobar

# go to .xmonad working directory
cd ~/.xmonad;

# clone xmonad, xmonad-contrib, and xmobar
git clone https://github.com/xmonad/xmonad ~/.xmonad/xmonad-git;
git clone https://github.com/xmonad/xmonad-contrib ~/.xmonad/xmonad-contrib-git;
git clone https://codeberg.org/xmobar/xmobar.git ~/.xmonad/xmobar-git;

# setup stack and install
stack setup;
stack install;

# compile xmonadctl binary
stack ghc xmonadctl.hs;

#+END_SRC
***** Install Hledger
#+BEGIN_SRC shell :tangle install.sh
# install hledger

stack install hledger;

#+END_SRC

**** Doom Emacs
#+BEGIN_SRC shell :tangle install.sh
# install doom
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d;
~/.emacs.d/bin/doom install;
~/.emacs.d/bin/doom sync;

#+END_SRC
**** Oh My Zsh
#+BEGIN_SRC shell :tangle install.sh
# install oh-my-zsh with unattended flag
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" --unattended;

# re-apply my existing config
mv ~/.zshrc.pre-oh-my-zsh ~/.zshrc;

# get zsh plugins
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions;

git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting;

chsh -s /bin/zsh;

#+END_SRC
*** Post Install Reminders
In this section, the script outputs a list of "post install reminders" which are things that I haven't added to the script yet, or are difficult to set up a script for.
#+BEGIN_SRC shell :tangle install.sh
# post install reminders
echo ""
echo "Post Install Reminders"
echo "-------------------"
echo ""
echo "Configure wallpaper via nitrogen"
echo "Set up mbsync and mu4e, including mu-1.16.5"
echo "Transfer relevant files via backups and syncthing"
echo "Configure larger and nicer fonts for the tty"
echo "Set up ssh keys for servers and git"

#+END_SRC
