# Created 2022-06-06 Mon 18:35
#+title: Doom Emacs Literate Config
#+author: emmet

* What is Doom Emacs?
[[https://github.com/doomemacs/doomemacs][Doom Emacs]] is a distribution of the [[https://www.gnu.org/software/emacs/][Emacs Text Editor]] designed for [[https://www.vim.org/][Vim]] users. I like to use Emacs due to its extensibility and extra features it is cabaple of (besides text editing). Some of these extra features include:
- [[https://orgmode.org/][Org Mode]] (Hierarchical text-based document format)
- [[https://www.orgroam.com/][Org Roam]] (A second brain / personal wiki)
- [[https://orgmode.org/][Org Agenda]] (Calendar and todo list)
- [[https://www.emacswiki.org/emacs/mu4e][mu4e]] (Email)
- [[https://github.com/skeeto/elfeed][elfeed]] (RSS Reader)
- [[https://magit.vc/][magit]] (Git Client)

I have found Emacs to be incredibly efficient, and transferring my workflow to fit inside of Emacs has allowed me to get much more work done.

* Configuration for Doom Emacs
Doom Emacs is configured via 3 main files, written in Elisp, a dialect of the Lisp programming langauge designed for Emacs. These 3 main files are:
- [[file:./config.el][config.el]] - Stores your main configuration and allows to set user variables.
- [[file:./init.el][init.el]] - Allows quick downloads of groups of Emacs packages. These groups of Emacs packages are curated by the Doom Emacs developers.
- [[file:./packages.el][packages.el]] - Allows you to download additional packages from Melpa (Emacs package manager).

By storing your configuration in these 3 files, it allows for quick reproducible builds of Doom Emacs.

You can also load separate files inside of [[file:./config.el][config.el]] via the =load!= function, like so:

#+begin_src emacs-lisp
(load! "~/.doom.d/private.el")
#+end_src

I use this functionality to load my private config file with non-public information.

* My [[file:./config.el][config.el]]
** Preamble + User Configuration
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;;;------ User configuration ------;;;

;; My default user identity as my yt alias
(setq user-full-name "emmet")

;; This shows me normal line numbers
(setq display-line-numbers-type t)

;; Theme
(setq doom-theme 'doom-oceanic-next)

;; Transparent background
(set-frame-parameter (selected-frame) 'alpha '(90 . 90))
(add-to-list 'default-frame-alist '(alpha . (90 . 90)))

;; This makes non-main buffers dimmer, so you can focus on main buffers
(solaire-global-mode +1)

;; Beacon shows where the cursor is, even when fast scrolling
(setq beacon-mode t)

;; Quicker window management keybindings
(bind-key* "C-j" #'evil-window-down)
(bind-key* "C-k" #'evil-window-up)
(bind-key* "C-h" #'evil-window-left)
(bind-key* "C-l" #'evil-window-right)
(bind-key* "C-q" #'evil-window-delete)

;; Disables custom.el
(setq custom-file null-device)
#+end_src
** Registers
#+begin_src emacs-lisp
;;;------ Registers ------;;;

(map! :leader
      :desc "Jump to register"
      "r" 'jump-to-register)

(set-register ?f '(file . "/home/emmet/Family.s/Documents/Finances/hledger.journal"))
(set-register ?r '(file . "/home/emmet/README.org"))
#+end_src
** Org Mode Configuration
*** Standard Org Mode Configuration
#+begin_src emacs-lisp
;;;------ Org mode configuration ------;;;

;; Set default org directory
(setq org-directory "~/Org")

;; This allows you to actually control how big images are in org docs!
(setq org-image-actual-width nil)

;; Pretty org bullets
(use-package org-bullets
    :ensure t
        :init
        (add-hook 'org-mode-hook (lambda ()
                                   (org-bullets-mode 1))))

; Automatic table of contents is nice
(if (require 'toc-org nil t)
    (progn
      (add-hook 'org-mode-hook 'toc-org-mode)

      ;; enable in markdown, too
      (add-hook 'markdown-mode-hook 'toc-org-mode))
  (warn "toc-org not found"))


;;---- this block from http://fgiasson.com/blog/index.php/2016/06/21/optimal-emacs-settings-for-org-mode-for-literate-programming/ ----;;
;; Tangle Org files when we save them
(defun tangle-on-save-org-mode-file()
  (when (string= (message "%s" major-mode) "org-mode")
    (org-babel-tangle)))

(add-hook 'after-save-hook 'tangle-on-save-org-mode-file)

;; Enable autorevert globally so that buffers update when files change on disk.
;; Very useful when used with file syncing (i.e. syncthing)
(setq global-auto-revert-mode t)
(setq auto-revert-use-notify nil)

;; Add Org files to the agenda when we save them
;;(defun to-agenda-on-save-org-mode-file()
;;  (when (string= (message "%s" major-mode) "org-mode")
;;    (org-agenda-file-to-front)))

;;(add-hook 'after-save-hook 'to-agenda-on-save-org-mode-file)
;; ---- end block ---- ;;

;; Custom function to convert org mode to ODP presentation
;; Depends on bash, libreoffice, and pandoc
(defun my-ox-odp ()
  "Convert an org mode file to an ODP presentation."
  (interactive)
  (setq file-name (buffer-file-name))
  (setq output-pptx-file-name (replace-regexp-in-string "\.org" "\.pptx" (buffer-file-name)))
  (setq output-odp-file-name (replace-regexp-in-string "\.org" "\.odp" (buffer-file-name)))
  (setq odp-style-file-name (completing-read "Choose style: "
                                             '(("/home/emmet/.doom.d/scripts/ox-odp/styles/water.odp")) nil t))
  (shell-command (concat "~/.doom.d/scripts/ox-odp.sh \"" (buffer-file-name) "\" \"" odp-style-file-name "\" > /dev/null"))
  )

(map! :leader
      :desc "Convert org document to odp presentation"
      "e p" 'my-ox-odp)
#+end_src
*** Custom Org Mode Scripts
**** my-ox-odp Script
This is a short chained script (defined above), which converts an org document to an ODP presentation. This script fundamentally functions by running a shell script ([[file:./scripts/ox-odp/ox-odp.sh][ox-odp.sh]]), which also calls a Python script ([[file:./scripts/ox-odp/ox-odp-xml-parse.py][ox-odp-xml-parse.py]]).
***** [[file:./scripts/ox-odp/ox-odp.sh][ox-odp.sh]]
#+begin_src shell
#!/bin/sh

filename=$1
echo $filename
stylefile=$2
echo $stylefile

filenamebase=$(basename "$filename")
filenameext="${filenamebase##*.}"
echo $filenameext

if [ $filenameext = "org" ]; then
   stylefilebase=$(basename "$stylefile")
   stylefileext="${stylefilebase##*.}"

   if [ $stylefileext = "odp" ]; then
       output="${filename//\.org/\.pptx}"
       finaloutput="${filename//\.org/\.odp}"
       pandoc "$filename" -o "$output"
       soffice --convert-to odp "$output"
       unzip "$finaloutput" content.xml
       unzip "$stylefile" styles.xml

       sed 's~</text:span>~~g' content.xml
       sed 's~<text:span text:style-name="..">~~g' content.xml

       python3 ~/.doom.d/ox-odp-xml-parse.py

       zip -d $finaloutput styles.xml
       zip -m $finaloutput styles.xml

       zip -d $finaloutput content.xml
       zip -m $finaloutput content.xml

       rm $output

       exit

   else
       echo "Style file is not an odp file."
   fi
else
    echo "Base file is not an org file."
    exit
fi

exit
#+end_src
***** [[file:./scripts/ox-odp/ox-odp-xml-parse.py][ox-odp-xml-parse.py]]
This script parses through the raw LibreOffice XML to fix some common formatting errors with the standard Org to pptx to odp conversion strategy.
#+begin_src python
#!/usr/bin/env python3

import xml.etree.ElementTree as ET
import copy

# Read content.xml into parser
mytree = ET.parse('./content.xml')
myroot = mytree.getroot()

# Read styles.xml into parser
styletree = ET.parse('./styles.xml')
styleroot = styletree.getroot()

# Remove direct-formatting from text:style-name attributes in text:p elements
counter = 0
for text in myroot.iter('{urn:oasis:names:tc:opendocument:xmlns:text:1.0}p'):
    if '{urn:oasis:names:tc:opendocument:xmlns:text:1.0}style-name' in text.keys():
        stylename = text.attrib['{urn:oasis:names:tc:opendocument:xmlns:text:1.0}style-name']
        if stylename[0] == "P":
            counter += 1
            text.attrib.pop('{urn:oasis:names:tc:opendocument:xmlns:text:1.0}style-name')
print('Deleted '+str(counter)+' text:style-name attributes in text:p elements.')

# Remove direct-formatting from text:style-name attributes in text:span elements
counter = 0
for span in myroot.iter('{urn:oasis:names:tc:opendocument:xmlns:text:1.0}span'):
    if '{urn:oasis:names:tc:opendocument:xmlns:text:1.0}style-name' in span.keys():
        span.attrib.pop('{urn:oasis:names:tc:opendocument:xmlns:text:1.0}style-name')
print('Deleted '+str(counter)+' text:style-name attributes in text:span elements.')

# Remove direct-formatting from draw:text-style-name attributes in draw:frame elements
counter = 0
for drawing in myroot.iter('{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}frame'):
    if '{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}text-style-name' in drawing.keys():
        stylename = drawing.attrib['{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}text-style-name']
        if stylename[0] == "P":
            counter += 1
            drawing.attrib.pop('{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}text-style-name')
print('Deleted '+str(counter)+' draw:text-style-name attributes in text:p elements.')

# Redefine default styles (style:style elements) and purge unnecessary ones
counter = 0
kounter = 0
for style in myroot.iter('{urn:oasis:names:tc:opendocument:xmlns:style:1.0}style'):
    if '{urn:oasis:names:tc:opendocument:xmlns:style:1.0}name' in style.keys():
        stylename = style.attrib['{urn:oasis:names:tc:opendocument:xmlns:style:1.0}name']
        if stylename == "pr1":
            counter += 1
            style.set('{urn:oasis:names:tc:opendocument:xmlns:style:1.0}parent-style-name','DefaultTheme-title')
        elif stylename == "pr2":
            counter += 1
            style.set('{urn:oasis:names:tc:opendocument:xmlns:style:1.0}parent-style-name','DefaultTheme-subtitle')
        elif stylename == "pr3":
            counter += 1
            style.set('{urn:oasis:names:tc:opendocument:xmlns:style:1.0}parent-style-name','DefaultTheme-notes')
        elif stylename == "pr4":
            counter += 1
            style.set('{urn:oasis:names:tc:opendocument:xmlns:style:1.0}parent-style-name','DefaultTheme-outline1')
print('Redefined '+str(counter)+' style:parent-style-name attributes in style:style elements.')
print('Deleted '+str(kounter)+' style:style elements.')

# Search for automatic-styles element
i = 0
col1 = 0
while (i < len(myroot)):
    print(myroot[i].tag)
    if myroot[i].tag=="{urn:oasis:names:tc:opendocument:xmlns:office:1.0}automatic-styles":
        col1 = i
    i += 1

# Remove unnecessary style:style and test:list-style elements underneath automatic-styles
i = 0
while (i < len(myroot[col1])):
    if (myroot[col1][i].tag == "{urn:oasis:names:tc:opendocument:xmlns:style:1.0}style"):
        if ("{urn:oasis:names:tc:opendocument:xmlns:style:1.0}name" in myroot[col1][i].keys()):
            if myroot[col1][i].attrib["{urn:oasis:names:tc:opendocument:xmlns:style:1.0}name"] in ["pr5","pr6","pr7","pr8","pr9"]:
                print("Removing "+myroot[col1][i].tag)
                myroot[col1].remove(myroot[col1][i])
                i -= 1
            elif myroot[col1][i].attrib["{urn:oasis:names:tc:opendocument:xmlns:style:1.0}name"][0] == "P":
                print("Removing "+myroot[col1][i].tag)
                myroot[col1].remove(myroot[col1][i])
                i -= 1
    if (myroot[col1][i].tag == "{urn:oasis:names:tc:opendocument:xmlns:text:1.0}list-style"):
        print("Removing "+myroot[col1][i].tag)
        myroot[col1].remove(myroot[col1][i])
        i -= 1
    i += 1

#i = 0
#while (i < len(myroot[col1])):
#    print(myroot[col1][i].attrib)
#    i += 1

# Find ML1 in styles.xml and copy it into L1 in content.xml
# Search for automatic-styles element
i = 0
stylecol1 = 0
while (i < len(styleroot)):
    print(styleroot[i].tag)
    if styleroot[i].tag=="{urn:oasis:names:tc:opendocument:xmlns:office:1.0}automatic-styles":
        stylecol1 = i
    i += 1

# Remove unnecessary style:style and test:list-style elements underneath automatic-styles
i = 0
while (i < len(styleroot[stylecol1])):
    if (styleroot[stylecol1][i].tag == "{urn:oasis:names:tc:opendocument:xmlns:text:1.0}list-style"):
        if (styleroot[stylecol1][i].attrib["{urn:oasis:names:tc:opendocument:xmlns:style:1.0}name"] == "ML1"):
            liststyle_copy = copy.deepcopy(styleroot[stylecol1][i])
            myroot[col1].append(liststyle_copy)
            myroot[col1][-1].attrib['{urn:oasis:names:tc:opendocument:xmlns:style:1.0}name'] = "L1"
    i += 1

# Update presentation:style-name attribute of all draw:frame elements
counter = 0
for frame in myroot.iter('{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}frame'):
    if '{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}class' in frame.keys():
        classname = frame.attrib['{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}class']
        if classname == "title":
            counter += 1
            frame.set('{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}style-name','pr1')
        elif classname == "subtitle":
            counter += 1
            frame.set('{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}style-name','pr2')
        elif classname == "notes":
            counter += 1
            frame.set('{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}style-name','pr3')
        elif classname == "outline":
            counter += 1
            frame.set('{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}style-name','pr4')
print("Updated "+str(counter)+" draw:frame elements")

# Update draw:master-page-name attributes in all draw:page elements
# Also delete all presentation:presentation-page-layout attributes
counter = 0
for page in myroot.iter('{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}page'):
    if '{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}master-page-name' in page.keys():
        page.set('{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}master-page-name','DefaultTheme')
        counter += 1
    if '{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}presentation-page-layout' in page.keys():
        page.attrib.pop('{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}presentation-page-layout')

print("Updated "+str(counter)+" draw:page elements")

# Update all text:list elements to have text:style-name = L1
counter = 0
for page in myroot.iter('{urn:oasis:names:tc:opendocument:xmlns:text:1.0}list'):
    if '{urn:oasis:names:tc:opendocument:xmlns:text:1.0}style-name' in page.keys():
        page.set('{urn:oasis:names:tc:opendocument:xmlns:text:1.0}style-name','L1')
        counter += 1

print("Updated "+str(counter)+" text:list elements")

#mytree.canonicalize(out='content.xml')
mytree.write('content.xml')
styletree.write('styles.xml')
#+end_src
** Org Roam Configuration
#+begin_src emacs-lisp
;;;------ Org roam configuration ------;;;

(setq org-roam-directory "~/Teaching.p/Roam"
      org-roam-db-location "~/Teaching.p/Roam/org-roam.db")

(defun org-roam-switch-db ()
  "Switch to a different org-roam database"
  (interactive)
  (setq org-roam-db-choice (completing-read "Select org roam database: "
                            '("Default" "Family" "Teaching" "Producer" "Gamedev") nil t))
  (if (string= org-roam-db-choice "Default")
      (setq org-roam-directory "~/Roam"
            org-roam-db-location "~/Roam/org-roam.db"))
  (if (string= org-roam-db-choice "Teaching")
      (setq org-roam-directory "~/Teaching.p/Roam"
            org-roam-db-location "~/Teaching.p/Roam/org-roam.db"))
  (if (string= org-roam-db-choice "Family")
      (setq org-roam-directory "~/Family.s/Roam"
            org-roam-db-location "~/Family.s/Roam/org-roam.db"))
  (if (string= org-roam-db-choice "Producer")
      (setq org-roam-directory "~/Producer.p/Roam"
            org-roam-db-location "~/Producer.p/Roam/org-roam.db"))
  (if (string= org-roam-db-choice "Gamedev")
      (setq org-roam-directory "~/Gamedev.p/Roam"
            org-roam-db-location "~/Gamedev.p/Roam/org-roam.db"))
  (message (concat "Switched to " org-roam-db-choice " org-roam database."))
  )

(map! :leader
      :prefix ("N" . "org-roam notes")
      :desc "Insert new roam node"
      "c" 'org-roam-capture)

(map! :leader
      :prefix ("N" . "org-roam notes")
      :desc "Insert new roam node"
      "i" 'org-roam-node-insert)

(map! :leader
      :prefix ("N" . "org-roam notes")
      :desc "Find roam node"
      "." 'org-roam-node-find)

(map! :leader
      :prefix ("N" . "org-roam notes")
      :desc "Switch org-roam database"
      "s" 'org-roam-switch-db)

(org-roam-db-autosync-mode)
#+end_src
** Org Agenda Configuration
#+begin_src emacs-lisp
;;;------ Org agenda configuration ------;;;

;; Set folder for my org agenda files
(setq org-agenda-files (list "/home/emmet/Family.s/Agenda"
                             "/home/emmet/Producer.p/Agenda"
                             "/home/emmet/Agenda"
                             "/home/emmet/Teaching.p/Agenda"
                             "/home/emmet/Gamedev.p/Agenda"))

;; Function to be run when org-agenda is opened
(defun org-agenda-open-hook ()
  "Hook to be run when org-agenda is opened"
  (org-agenda-follow-mode)
  )

;; Adds hook to org agenda mode, making follow mode active in org agenda
(add-hook 'org-agenda-mode-hook 'org-agenda-open-hook)

(map! :leader
      :desc "Open org calendar"
      "o c" #'cfw:open-org-calendar)
#+end_src
** Magit Configuration
#+begin_src emacs-lisp
;;;------ magit configuration ------;;;

;; Need the following two blocks to make magit work with git bare repos
(defun ~/magit-process-environment (env)
  "Add GIT_DIR and GIT_WORK_TREE to ENV when in a special directory.
https://github.com/magit/magit/issues/460 (@cpitclaudel)."
  (let ((default (file-name-as-directory (expand-file-name default-directory)))
        (home (expand-file-name "~/")))
    (when (string= default home)
      (let ((gitdir (expand-file-name "~/.dotfiles.git/")))
        (push (format "GIT_WORK_TREE=%s" home) env)
        (push (format "GIT_DIR=%s" gitdir) env))))
  env)

(advice-add 'magit-process-environment
            :filter-return #'~/magit-process-environment)
#+end_src
** Elfeed Configuration
#+begin_src emacs-lisp
;;;------ elfeed configuration ------;;;

(map! :leader
      :desc "Open elfeed"
      "o n" #'elfeed)
#+end_src
** mu4e Configuration
*** Standard mu4e Configuration
#+begin_src emacs-lisp
;;;------ mu4e configuration ------;;;

;; Auto-load mu4e and org-mu4e on start
(require 'mu4e)

;; mu4e update command
(setq mu4e-get-mail-command "mbsync -a")

;; Run mu4e update every n seconds
(setq mu4e-update-interval 100)

;; Set maildir for mu4e
(setq mu4e-root-maildir "~/.mail")

;; Set important folders for mu4e
(setq mu4e-sent-folder     "/Sent"
      mu4e-drafts-folder   "/Drafts"
      mu4e-trash-folder    "/Trash")

;; My mu4e headers
(setq mu4e-headers-fields
      '((:from            . 22)
        (:human-date      . 12)
        (:flags           .  6)
        (:maildir         . 30)
        (:thread-subject  . nil)))

;; Following excerpt improves deleting in mu4e

;; Excerpt taken from Gregory J Stein
;; http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/
(defun remove-nth-element (nth list)
  (if (zerop nth) (cdr list)
    (let ((last (nthcdr (1- nth) list)))
      (setcdr last (cddr last))
      list)))
(setq mu4e-marks (remove-nth-element 5 mu4e-marks))
(add-to-list 'mu4e-marks
     '(trash
       :char ("d" . "▼")
       :prompt "dtrash"
       :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
       :action (lambda (docid msg target)
                 (mu4e~proc-move docid
                    (mu4e~mark-check-target target) "-N"))))
#+end_src
** hledger-mode Configuration
#+begin_src emacs-lisp
;;;-- hledger-mode configuration ;;;--

;;; Basic configuration
(require 'hledger-mode)

;; To open files with .journal extension in hledger-mode
(add-to-list 'auto-mode-alist '("\\.journal\\'" . hledger-mode))

;; The default journal location is too opinionated.
(setq hledger-jfile "/home/emmet/Family.s/Documents/Finances/hledger.journal")

;;; Auto-completion for account names
;; For company-mode users:
(add-to-list 'company-backends 'hledger-company)

(map! :leader
      :prefix ("l" . "hledger")
      :desc "Exec hledger command"
      "c" 'hledger-run-command)

(map! :leader
      :prefix ("l" . "hledger")
      :desc "Generate hledger balancesheet"
      "b" 'hledger-balancesheet*)

(map! :leader
      :prefix ("l" . "hledger")
      :desc "Add new entry to hledger journal"
      "e" 'hledger-jentry)

(map! :localleader
      :map hledger-mode-map
      :desc "Reschedule transaction at point"
      "d s" 'hledger-reschedule)

(map! :localleader
      :map hledger-mode-map
      :desc "Edit amount at point"
      "t a" 'hledger-edit-amount)
#+end_src
** Load Prvate Config
#+begin_src emacs-lisp
;;;------ Load my private config ------;;;

(load! "~/.doom.d/private.el")
#+end_src
** Extra
#+begin_src emacs-lisp
;;;------ Extra ------;;;

;; This line is here so that my org calendar works properly
;; Auto opens org agenda on server startup
(org-agenda-list)
#+end_src
* My [[file:./init.el][init.el]]
** Default Preamble
#+begin_src emacs-lisp
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src
** Doom Package List
#+begin_src emacs-lisp
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +ranger)   ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ibuffer           ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       ;;(:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       cc                ; C > C++ == 1
       ;;clojure           ; java with a lisp
       common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       (haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       (ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       (mu4e +org)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src
* My [[file:./packages.el][packages.el]]
** Default Preamble
#+begin_src emacs-lisp
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src
** MELPA/ELPA/emacsmirror Package List
#+begin_src emacs-lisp
(package! org-bullets)
(package! org-roam)
(package! toc-org)
(package! beacon)
(package! ox-reveal)
(package! hledger-mode)
(package! rainbow-mode)
#+end_src
* Publish Script
I keep two literate configs, one which I edit (doom.org) and one that gets published to GitLab (doom-pub.org). I simply keep sensitive information inside of headers with noexport, and then export my private doom.org config using the following script:
#+begin_src emacs-lisp
;; Export link below runs this
(org-org-export-to-org)
#+end_src
#+begin_src emacs-lisp
;; Publish link below runs this
(rename-file "./doom.org.org" "doom-pub.org")
#+end_src
[[elisp:(org-org-export-to-org)][Export]]
[[elisp:(rename-file "./doom.org.org" "doom-pub.org" t)][Publish]]
