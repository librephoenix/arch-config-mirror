# Created 2023-03-25 Sat 15:35
#+title: Doom Emacs Literate Config
#+author: emmet

* What is Doom Emacs?
[[https://github.com/doomemacs/doomemacs][Doom Emacs]] is a distribution of the [[https://www.gnu.org/software/emacs/][Emacs Text Editor]] designed for [[https://www.vim.org/][Vim]] users. I like to use Emacs due to its extensibility and extra features it is capable of (besides text editing). Some of these extra features include:
- [[https://orgmode.org/][Org Mode]] (Hierarchical text-based document format)
- [[https://www.orgroam.com/][Org Roam]] (A second brain / personal wiki)
- [[https://orgmode.org/][Org Agenda]] (Calendar and todo list)
- [[https://www.emacswiki.org/emacs/mu4e][mu4e]] (Email)
- [[https://github.com/skeeto/elfeed][elfeed]] (RSS Reader)
- [[https://magit.vc/][magit]] (Git Client)

I have found Emacs to be incredibly efficient, and transferring my workflow to fit inside of Emacs has allowed me to get much more work done.

* Configuration for Doom Emacs
Doom Emacs is configured via 3 main files, written in Elisp, a dialect of the Lisp programming langauge designed for Emacs. These 3 main files are:
- [[file:./config.el][config.el]] - Stores your main configuration and allows to set user variables.
- [[file:./init.el][init.el]] - Allows quick downloads of groups of Emacs packages. These groups of Emacs packages are curated by the Doom Emacs developers.
- [[file:./packages.el][packages.el]] - Allows you to download additional packages from Melpa (Emacs package manager).

By storing your configuration in these 3 files, it allows for quick reproducible builds of Doom Emacs.

You can also load separate files inside of [[file:./config.el][config.el]] via the =load!= function, like so:

#+begin_src emacs-lisp
(load! "~/.doom.d/private.el")
#+end_src

I use this functionality to load my private config file with non-public information.

* My [[file:./config.el][config.el]]
** Preamble + User Configuration
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;;;------ User configuration ------;;;

;; My default user identity as my yt alias
(setq user-full-name "emmet")

;; This shows me normal line numbers
(setq display-line-numbers-type 'visual)

;; Makes for easier editing with wrapped lines
(setq line-move-visual t)

;; Theme
(setq doom-theme 'doom-old-hope)
(setq doom-font (font-spec :family "Inconsolata" :size 20))

;; Transparent background
(set-frame-parameter (selected-frame) 'alpha '(90 . 90))
(add-to-list 'default-frame-alist '(alpha . (90 . 90)))

;; Icons in completion buffers
(all-the-icons-completion-mode)

;; This makes non-main buffers dimmer, so you can focus on main buffers
(solaire-global-mode +1)

;; Grammar tasing should be voluntary
(setq writegood-mode nil)

;; Beacon shows where the cursor is, even when fast scrolling
(setq beacon-mode t)

;; Quicker window management keybindings
(bind-key* "C-j" #'evil-window-down)
(bind-key* "C-k" #'evil-window-up)
(bind-key* "C-h" #'evil-window-left)
(bind-key* "C-l" #'evil-window-right)
(bind-key* "C-q" #'evil-window-delete)

;; Mouse buffer management
(bind-key* "<mouse-8>" #'previous-buffer)
(bind-key* "<mouse-9>" #'next-buffer)

;; I like evil mode visual movement
(map! :map evil-normal-state-map
      :desc "Move to next visual line"
      "j" 'evil-next-visual-line)
(map! :map evil-normal-state-map
      :desc "Move to previous visual line"
      "k" 'evil-previous-visual-line)

;; Disables custom.el
(setq custom-file null-device)

;; Fancy splash image
(setq fancy-splash-image "~/.doom.d/arch.png")

(setq +doom-dashboard-menu-sections
'(("Open org roam overview" :icon
  (all-the-icons-octicon "globe" :face 'doom-dashboard-menu-title)
  :face
  (:inherit
   (doom-dashboard-menu-title bold))
  :action org-roam-default-overview)
 ("Roam to another db" :icon
  (all-the-icons-fileicon "org" :face 'doom-dashboard-menu-title)
  :action org-roam-switch-db)
 ("Open agenda" :icon
  (all-the-icons-octicon "calendar" :face 'doom-dashboard-menu-title)
  :when
  (fboundp 'org-agenda)
  :action org-agenda-list
  :key "SPC o A a")
 ("Open private configuration" :icon
  (all-the-icons-octicon "tools" :face 'doom-dashboard-menu-title)
  :when
  (file-directory-p doom-user-dir)
  :action doom/open-private-config)
 ("Open documentation" :icon
  (all-the-icons-octicon "book" :face 'doom-dashboard-menu-title)
  :action doom/help)
 ("Quit emacs" :icon
  (all-the-icons-faicon "level-down" :face 'doom-dashboard-menu-title)
  :action save-buffers-kill-terminal)
 )
)

;; Requires for faster loading
(require 'org-agenda)
(require 'dired)

;; Garbage collection to speed things up
(add-hook 'after-init-hook
          #'(lambda ()
              (setq gc-cons-threshold (* 100 1000 1000))))
(add-hook 'focus-out-hook 'garbage-collect)
(run-with-idle-timer 5 t 'garbage-collect)
#+end_src
** Registers
#+begin_src emacs-lisp
;;;------ Registers ------;;;

(map! :leader
      :desc "Jump to register"
      "r" 'jump-to-register)

(set-register ?f '(file . "/home/emmet/Family.s/Roam/hledger.org"))
(set-register ?r '(file . "/home/emmet/README.org"))
(set-register ?d '(file . "/home/emmet/.doom.d/doom.org"))
(set-register ?h '(file . "/home/emmet"))
(set-register ?x '(file . "/home/emmet/.xmonad/xmonad.org"))
(set-register ?s '(file . "/home/emmet/.install/install.org"))
#+end_src
** Org Mode Configuration
*** Standard Org Mode Configuration
#+begin_src emacs-lisp
;;;------ Org mode configuration ------;;;

;; Set default org directory
(setq org-directory "~/.Org")

(remove-hook 'after-save-hook #'+literate|recompile-maybe)
(set-company-backend! 'org-mode nil)

;; This allows you to actually control how big images are in org docs!
(setq org-image-actual-width nil)

;; Have images automatically appear on org startup
(setq org-startup-with-inline-images t)

(custom-set-faces!
  '(org-level-1 :inherit outline-1 :height 1.6)
  '(org-level-2 :inherit outline-2 :height 1.4)
  '(org-level-3 :inherit outline-3 :height 1.3)
  '(org-level-4 :inherit outline-4 :height 1.2)
  '(org-level-5 :inherit outline-5 :height 1.15)
  '(org-level-6 :inherit outline-6 :height 1.1)
  '(org-level-7 :inherit outline-7 :height 1.05)
  )

(custom-set-faces!
  '(org-link :foreground nil))

;; Pretty org bullets
(use-package org-bullets
    :ensure t
        :init
        (add-hook 'org-mode-hook (lambda ()
                                   (org-bullets-mode 1))))

; Automatic table of contents is nice
(if (require 'toc-org nil t)
    (progn
      (add-hook 'org-mode-hook 'toc-org-mode)

      ;; enable in markdown, too
      (add-hook 'markdown-mode-hook 'toc-org-mode))
  (warn "toc-org not found"))


;;---- this block from http://fgiasson.com/blog/index.php/2016/06/21/optimal-emacs-settings-for-org-mode-for-literate-programming/ ----;;
;; Tangle Org files when we save them
(defun tangle-on-save-org-mode-file()
  (when (string= (message "%s" major-mode) "org-mode")
    (org-babel-tangle)))

(defun text-in-buffer-p (TEXT)
(save-excursion (goto-char (point-min)) (search-forward TEXT nil t)))

(defun apply-old-todos-tag-maybe (&optional FILE)
   (interactive)
   (if (stringp FILE)
   (setq the-daily-node-filename FILE)
   (setq the-daily-node-filename buffer-file-name))
   (if (org-roam-dailies--daily-note-p the-daily-node-filename)
    (if (<= (nth 2 (org-roam-dailies-calendar--file-to-date the-daily-node-filename)) (nth 2 org-agenda-current-date))
      (if (<= (nth 1 (org-roam-dailies-calendar--file-to-date the-daily-node-filename)) (nth 1 org-agenda-current-date))
        (if (<= (nth 0 (org-roam-dailies-calendar--file-to-date the-daily-node-filename)) (nth 0 org-agenda-current-date))
          (funcall (lambda ()
            (with-current-buffer (get-file-buffer the-daily-node-filename) (org-roam-tag-add '("old-todos")))
            (with-current-buffer (get-file-buffer the-daily-node-filename) (org-roam-tag-remove '("todos")))
            )
          )
        )
      )
    )
  )
)

(defun apply-old-todos-tag-maybe-and-save (FILE)
  (interactive)
  (find-file-noselect FILE)
  (apply-old-todos-tag-maybe FILE)
  (with-current-buffer (get-file-buffer the-daily-node-filename) (save-buffer))
  (with-current-buffer (get-file-buffer the-daily-node-filename) (kill-buffer))
)

; This has a bug where it won't sync a new agenda file
; if I'm editing an org roam node file while set to another
; org roam db
(defun add-todos-tag-on-save-org-mode-file()
  (interactive)
  (when (string= (message "%s" major-mode) "org-mode")
    (if (or (text-in-buffer-p "SCHEDULED: <") (text-in-buffer-p "DEADLINE: <"))
      (org-roam-tag-add '("todos"))
      (org-roam-tag-remove '("todos"))
    )
    (apply-old-todos-tag-maybe)
    (org-roam-db-sync)
  )
)

(add-hook 'after-save-hook 'tangle-on-save-org-mode-file)
(add-hook 'after-save-hook 'add-todos-tag-on-save-org-mode-file)

;; Enable autorevert globally so that buffers update when files change on disk.
;; Very useful when used with file syncing (i.e. syncthing)
(setq global-auto-revert-mode nil)
(setq auto-revert-use-notify t)

;; ---- end block ---- ;;

;; Custom function to convert org mode to ODP presentation
;; Depends on bash, libreoffice, and pandoc
(defun my-ox-odp ()
  "Convert an org mode file to an ODP presentation."
  (interactive)
  (setq file-name (buffer-file-name))
  (setq output-pptx-file-name (replace-regexp-in-string "\.org" "\.pptx" (buffer-file-name)))
  (setq output-odp-file-name (replace-regexp-in-string "\.org" "\.odp" (buffer-file-name)))
  (setq odp-style-file-name (completing-read "Choose style: "
                                             '("/home/emmet/.doom.d/scripts/ox-odp/styles/water.odp"
                                                "/home/emmet/.doom.d/scripts/ox-odp/styles/dark.odp"
                                              ) nil t))
  (shell-command (concat "~/.doom.d/scripts/ox-odp/ox-odp.sh \"" (buffer-file-name) "\" \"" odp-style-file-name "\" > /dev/null"))
  )

(map! :leader
      :desc "Convert org document to odp presentation"
      "e p" 'my-ox-odp)

(require 'org-download)

;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)

(setq org-download-screenshot-method "flameshot gui -p %s")
(after! org-download
   (setq org-download-method 'directory))

(after! org
  (setq-default org-download-image-dir "img/"
        org-download-heading-lvl nil))

(defun my-org-screenshot ()
  "Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)
  (setq filename
        (concat
         (make-temp-name
          (concat (buffer-file-name)
                  "_"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (shell-command (concat "emacs-wayshot " filename))
  (insert (concat "[[" filename "]]"))
  (org-display-inline-images))

(defun my-org-paste()
  "Take an image from the clipboard into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)
  (setq filename
        (concat
         (make-temp-name
          (concat (file-name-directory (buffer-file-name))
                  "img/"
                  (file-name-nondirectory (buffer-file-name))
                  "_"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (shell-command (concat "wl-paste > " filename))
  (insert (concat "[[" filename "]]"))
  (org-display-inline-images))

(defun my-org-new-file-from-template()
  "Copy a template from ~/Templates into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)
  (setq template-file (completing-read "Template file:" (directory-files "~/Templates")))
  (setq filename
        (concat
         (make-temp-name
          (concat (file-name-directory (buffer-file-name))
                  "files/"
                  (file-name-nondirectory (buffer-file-name))
                  "_"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) (file-name-extension template-file t)))
  (copy-file (concat "/home/emmet/Templates/" template-file) filename)
  (setq prettyname (read-from-minibuffer "Pretty name:"))
  (insert (concat "[[./files/" (file-name-nondirectory filename) "][" prettyname "]]"))
  (org-display-inline-images))

(defun my-better-link-opener()
  "Open a link with mimeo instead of using emacs"
  (interactive)
  (setq the-link (expand-file-name (link-hint-copy-link-at-point)))
  (setq the-command (if (string= (file-name-extension the-link) "kra") "krita --nosplash"
                       (if (string= (file-name-extension the-link) "blend") "blender")))
  (async-shell-command (concat the-command " '" the-link "'"))
  )


(when (require 'openwith nil 'noerror)
   (setq openwith-associations
         (list
         (list (openwith-make-extension-regexp
                '("mpg" "mpeg" "mp3" "mp4"
                  "avi" "wmv" "wav" "mov" "flv"
                  "ogm" "ogg" "mkv"))
                  "mpv"
                  '(file))
         (list (openwith-make-extension-regexp
                '("doc" "xls" "ppt" "odt" "ods" "odg" "odp"))
                  "libreoffice"
                  '(file))
             '("\\.lyx" "lyx" (file))
             '("\\.chm" "kchmviewer" (file))
         (list (openwith-make-extension-regexp
                '("pdf" "ps" "ps.gz" "dvi"))
                  "atril"
                  '(file))
         (list (openwith-make-extension-regexp
                '("kdenlive"))
                  "kdenlive"
                  '(file))
         (list (openwith-make-extension-regexp
                '("kra"))
                  "krita"
                  '(file))
         (list (openwith-make-extension-regexp
                '("blend" "blend1"))
                  "blender"
                  '(file))
         (list (openwith-make-extension-regexp
                '("helio"))
                  "helio"
                  '(file))
         (list (openwith-make-extension-regexp
                '("svg"))
                  "inkscape"
                  '(file))
         (list (openwith-make-extension-regexp
                '("flp"))
                  "~/.local/bin/flstudio"
                  '(file))
             ))
   (openwith-mode 1))

(add-to-list 'display-buffer-alist '("^*Async Shell Command*" . (display-buffer-no-window)))

(map! :leader
      :desc "Insert a screenshot"
;;      "i s" 'my-org-screenshot)
      "i s" 'org-download-screenshot)

(map! :leader
      :desc "Insert image from clipboard"
;;      "i p" 'my-org-paste)
      "i p" 'org-download-clipboard)

(map! :leader
      :desc "Create a new file from a template and insert a link at point"
      "i t" 'my-org-new-file-from-template)

(map! :leader
      :desc "Open the link at point using mimeo"
      "o o" 'my-better-link-opener)

;; Online images inside of org mode is pretty cool
;; This snippit is from Tobias on Stack Exchange
;; https://emacs.stackexchange.com/questions/42281/org-mode-is-it-possible-to-display-online-images
(require 'org-yt)

(defun org-image-link (protocol link _description)
  "Interpret LINK as base64-encoded image data."
  (cl-assert (string-match "\\`img" protocol) nil
             "Expected protocol type starting with img")
  (let ((buf (url-retrieve-synchronously (concat (substring protocol 3) ":" link))))
    (cl-assert buf nil
               "Download of image \"%s\" failed." link)
    (with-current-buffer buf
      (goto-char (point-min))
      (re-search-forward "\r?\n\r?\n")
      (buffer-substring-no-properties (point) (point-max)))))

(org-link-set-parameters
 "imghttp"
 :image-data-fun #'org-image-link)

(org-link-set-parameters
 "imghttps"
 :image-data-fun #'org-image-link)

;; Better org table editing
(setq-default evil-insert-state-exit-hook '(org-update-parent-todo-statistics
 t))
(setq org-table-automatic-realign nil)

;; Better for org source blocks
(setq electric-indent-mode nil)

;; Mermaid diagrams
(setq ob-mermaid-cli-path "/usr/bin/mmdc")

;; Print org mode
(defun org-simple-print-buffer ()
  "Open an htmlized form of current buffer and open in a web browser to print"
  (interactive)
  (htmlize-buffer)
  (browse-url-of-buffer (concat (buffer-name) ".html"))
  (sleep-for 1)
  (kill-buffer (concat (buffer-name) ".html")))

;; Doesn't work yet, bc htmlize-region takes arguments BEG and END
;(defun org-simple-print-region()
;  "Open an htmlized form of current region and open in a web browser to print"
;  (interactive)
;  (htmlize-region )
;  (browse-url-of-buffer (concat (buffer-name) ".html"))
;  (sleep-for 1)
;  (kill-buffer (concat (buffer-name) ".html")))

(map! :leader
      :prefix ("P" . "Print")
      :desc "Simple print buffer in web browser"
      "p" 'org-simple-print-buffer)

(map! :leader
      :prefix ("P" . "Print")
      :desc "Simple print buffer in web browser"
      "b" 'org-simple-print-buffer)

;(map! :leader
;      :prefix ("P" . "Print")
;      :desc "Simple print region in web browser"
;      "r" 'org-simple-print-region)
#+end_src
*** Custom Org Mode Scripts
**** my-ox-odp Script
This is a short chained script (defined above), which converts an org document to an ODP presentation. This script fundamentally functions by running a shell script ([[file:./scripts/ox-odp/ox-odp.sh][ox-odp.sh]]), which also calls a Python script ([[file:./scripts/ox-odp/ox-odp-xml-parse.py][ox-odp-xml-parse.py]]).
***** [[file:./scripts/ox-odp/ox-odp.sh][ox-odp.sh]]
#+begin_src shell
#!/bin/sh

filename=$1
echo $filename
stylefile=$2
echo $stylefile

filenamebase=$(basename "$filename")
filenameext="${filenamebase##*.}"
echo $filenameext

if [ $filenameext = "org" ]; then
   stylefilebase=$(basename "$stylefile")
   stylefileext="${stylefilebase##*.}"

   if [ $stylefileext = "odp" ]; then
       output="${filename//\.org/\.pptx}"
       finaloutput="${filename//\.org/\.odp}"
       pandoc "$filename" -o "$output"
       soffice --convert-to odp "$output"
       unzip "$finaloutput" content.xml
       unzip "$stylefile" styles.xml

       sed 's~</text:span>~~g' content.xml
       sed 's~<text:span text:style-name="..">~~g' content.xml

       python3 ~/.doom.d/scripts/ox-odp/ox-odp-xml-parse.py

       zip -d $finaloutput styles.xml
       zip -m $finaloutput styles.xml

       zip -d $finaloutput content.xml
       zip -m $finaloutput content.xml

       rm $output

       exit

   else
       echo "Style file is not an odp file."
   fi
else
    echo "Base file is not an org file."
    exit
fi

exit
#+end_src
***** [[file:./scripts/ox-odp/ox-odp-xml-parse.py][ox-odp-xml-parse.py]]
This script parses through the raw LibreOffice XML to fix some common formatting errors with the standard Org to pptx to odp conversion strategy.
#+begin_src python
#!/usr/bin/env python3

import xml.etree.ElementTree as ET
import copy

# Read content.xml into parser
mytree = ET.parse('./content.xml')
myroot = mytree.getroot()

# Read styles.xml into parser
styletree = ET.parse('./styles.xml')
styleroot = styletree.getroot()

# Remove direct-formatting from text:style-name attributes in text:p elements
counter = 0
for text in myroot.iter('{urn:oasis:names:tc:opendocument:xmlns:text:1.0}p'):
    if '{urn:oasis:names:tc:opendocument:xmlns:text:1.0}style-name' in text.keys():
        stylename = text.attrib['{urn:oasis:names:tc:opendocument:xmlns:text:1.0}style-name']
        if stylename[0] == "P":
            counter += 1
            text.attrib.pop('{urn:oasis:names:tc:opendocument:xmlns:text:1.0}style-name')
print('Deleted '+str(counter)+' text:style-name attributes in text:p elements.')

# Remove direct-formatting from text:style-name attributes in text:span elements
counter = 0
for span in myroot.iter('{urn:oasis:names:tc:opendocument:xmlns:text:1.0}span'):
    if '{urn:oasis:names:tc:opendocument:xmlns:text:1.0}style-name' in span.keys():
        span.attrib.pop('{urn:oasis:names:tc:opendocument:xmlns:text:1.0}style-name')
print('Deleted '+str(counter)+' text:style-name attributes in text:span elements.')

# Remove direct-formatting from draw:text-style-name attributes in draw:frame elements
counter = 0
for drawing in myroot.iter('{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}frame'):
    if '{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}text-style-name' in drawing.keys():
        stylename = drawing.attrib['{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}text-style-name']
        if stylename[0] == "P":
            counter += 1
            drawing.attrib.pop('{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}text-style-name')
print('Deleted '+str(counter)+' draw:text-style-name attributes in text:p elements.')

# Redefine default styles (style:style elements) and purge unnecessary ones
counter = 0
kounter = 0
for style in myroot.iter('{urn:oasis:names:tc:opendocument:xmlns:style:1.0}style'):
    if '{urn:oasis:names:tc:opendocument:xmlns:style:1.0}name' in style.keys():
        stylename = style.attrib['{urn:oasis:names:tc:opendocument:xmlns:style:1.0}name']
        if stylename == "pr1":
            counter += 1
            style.set('{urn:oasis:names:tc:opendocument:xmlns:style:1.0}parent-style-name','DefaultTheme-title')
        elif stylename == "pr2":
            counter += 1
            style.set('{urn:oasis:names:tc:opendocument:xmlns:style:1.0}parent-style-name','DefaultTheme-subtitle')
        elif stylename == "pr3":
            counter += 1
            style.set('{urn:oasis:names:tc:opendocument:xmlns:style:1.0}parent-style-name','DefaultTheme-notes')
        elif stylename == "pr4":
            counter += 1
            style.set('{urn:oasis:names:tc:opendocument:xmlns:style:1.0}parent-style-name','DefaultTheme-outline1')
print('Redefined '+str(counter)+' style:parent-style-name attributes in style:style elements.')
print('Deleted '+str(kounter)+' style:style elements.')

# Search for automatic-styles element
i = 0
col1 = 0
while (i < len(myroot)):
    print(myroot[i].tag)
    if myroot[i].tag=="{urn:oasis:names:tc:opendocument:xmlns:office:1.0}automatic-styles":
        col1 = i
    i += 1

# Remove unnecessary style:style and test:list-style elements underneath automatic-styles
i = 0
while (i < len(myroot[col1])):
    if (myroot[col1][i].tag == "{urn:oasis:names:tc:opendocument:xmlns:style:1.0}style"):
        if ("{urn:oasis:names:tc:opendocument:xmlns:style:1.0}name" in myroot[col1][i].keys()):
            if myroot[col1][i].attrib["{urn:oasis:names:tc:opendocument:xmlns:style:1.0}name"] in ["pr5","pr6","pr7","pr8","pr9"]:
                print("Removing "+myroot[col1][i].tag)
                myroot[col1].remove(myroot[col1][i])
                i -= 1
            elif myroot[col1][i].attrib["{urn:oasis:names:tc:opendocument:xmlns:style:1.0}name"][0] == "P":
                print("Removing "+myroot[col1][i].tag)
                myroot[col1].remove(myroot[col1][i])
                i -= 1
    if (myroot[col1][i].tag == "{urn:oasis:names:tc:opendocument:xmlns:text:1.0}list-style"):
        print("Removing "+myroot[col1][i].tag)
        myroot[col1].remove(myroot[col1][i])
        i -= 1
    i += 1

#i = 0
#while (i < len(myroot[col1])):
#    print(myroot[col1][i].attrib)
#    i += 1

# Find ML1 in styles.xml and copy it into L1 in content.xml
# Search for automatic-styles element
i = 0
stylecol1 = 0
while (i < len(styleroot)):
    print(styleroot[i].tag)
    if styleroot[i].tag=="{urn:oasis:names:tc:opendocument:xmlns:office:1.0}automatic-styles":
        stylecol1 = i
    i += 1

# Remove unnecessary style:style and test:list-style elements underneath automatic-styles
i = 0
while (i < len(styleroot[stylecol1])):
    if (styleroot[stylecol1][i].tag == "{urn:oasis:names:tc:opendocument:xmlns:text:1.0}list-style"):
        if (styleroot[stylecol1][i].attrib["{urn:oasis:names:tc:opendocument:xmlns:style:1.0}name"] == "ML1"):
            liststyle_copy = copy.deepcopy(styleroot[stylecol1][i])
            myroot[col1].append(liststyle_copy)
            myroot[col1][-1].attrib['{urn:oasis:names:tc:opendocument:xmlns:style:1.0}name'] = "L1"
    i += 1

# Update presentation:style-name attribute of all draw:frame elements
counter = 0
for frame in myroot.iter('{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}frame'):
    if '{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}class' in frame.keys():
        classname = frame.attrib['{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}class']
        if classname == "title":
            counter += 1
            frame.set('{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}style-name','pr1')
        elif classname == "subtitle":
            counter += 1
            frame.set('{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}style-name','pr2')
        elif classname == "notes":
            counter += 1
            frame.set('{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}style-name','pr3')
        elif classname == "outline":
            counter += 1
            frame.set('{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}style-name','pr4')
print("Updated "+str(counter)+" draw:frame elements")

# Update draw:master-page-name attributes in all draw:page elements
# Also delete all presentation:presentation-page-layout attributes
counter = 0
for page in myroot.iter('{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}page'):
    if '{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}master-page-name' in page.keys():
        page.set('{urn:oasis:names:tc:opendocument:xmlns:drawing:1.0}master-page-name','DefaultTheme')
        counter += 1
    if '{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}presentation-page-layout' in page.keys():
        page.attrib.pop('{urn:oasis:names:tc:opendocument:xmlns:presentation:1.0}presentation-page-layout')

print("Updated "+str(counter)+" draw:page elements")

# Update all text:list elements to have text:style-name = L1
counter = 0
for page in myroot.iter('{urn:oasis:names:tc:opendocument:xmlns:text:1.0}list'):
    if '{urn:oasis:names:tc:opendocument:xmlns:text:1.0}style-name' in page.keys():
        page.set('{urn:oasis:names:tc:opendocument:xmlns:text:1.0}style-name','L1')
        counter += 1

print("Updated "+str(counter)+" text:list elements")

#mytree.canonicalize(out='content.xml')
mytree.write('content.xml')
styletree.write('styles.xml')
#+end_src
** Org Roam Configuration
#+begin_src emacs-lisp
;;;------ Org roam configuration ------;;;

(setq org-roam-directory "~/Roam"
      org-roam-db-location "~/Roam/org-roam.db")

(setq org-roam-node-display-template
      "${title:65}📝${tags:*}")

(setq full-org-roam-db-list nil)

(setq full-org-roam-db-list (directory-files "~" t "\\.[p,s]$"))
(dolist (item full-org-roam-db-list)
  (setq full-org-roam-db-list
        (append (directory-files item t "\\.[p,s]$") full-org-roam-db-list)))

(setq org-roam-db-choice "Default")
(setq full-org-roam-db-list-pretty (list "Default"))
(dolist (item full-org-roam-db-list)
  (setq full-org-roam-db-list-pretty
       (append (list
             (replace-regexp-in-string "\\/home\\/emmet\\/" "" item)) full-org-roam-db-list-pretty)))

(defun org-roam-switch-db (&optional arg silent)
  "Switch to a different org-roam database, arg"
  (interactive)
  (when (not arg)
  (setq full-org-roam-db-list nil)

  (setq full-org-roam-db-list (directory-files "~" t "\\.[p,s]$"))
  (dolist (item full-org-roam-db-list)
    (setq full-org-roam-db-list
        (append (directory-files item t "\\.[p,s]$") full-org-roam-db-list)))

  (setq full-org-roam-db-list-pretty (list "Default"))
  (dolist (item full-org-roam-db-list)
    (setq full-org-roam-db-list-pretty
        (append (list
                 (replace-regexp-in-string "\\/home\\/emmet\\/" "" item)) full-org-roam-db-list-pretty)))

  (setq org-roam-db-choice (completing-read "Select org roam database: "
                          full-org-roam-db-list-pretty nil t)))
  (when arg
    (setq org-roam-db-choice arg))

  (if (string= org-roam-db-choice "Default")
      (setq org-roam-directory (f-canonical "~/Roam")
            org-roam-db-location (f-canonical "~/Roam/org-roam.db")
            org-directory (f-canonical"~/Roam"))
      (setq org-roam-directory (f-canonical (concat "~/" org-roam-db-choice "/Roam"))
            org-roam-db-location (f-canonical (concat "~/" org-roam-db-choice "/Roam/org-roam.db"))
            org-directory (f-canonical (concat "~/" org-roam-db-choice "/Roam"))))
  (when (not silent)
  (if (file-exists-p (concat org-roam-directory "/dashboard.org"))
      (org-open-file (concat org-roam-directory "/dashboard.org"))
      (dired org-roam-directory)))

  (org-roam-db-sync)

  (message (concat "Switched to " org-roam-db-choice " org-roam database!")))

(defun org-roam-default-overview ()
  (interactive)
  (org-roam-switch-db "Default"))

(defun org-roam-switch-db-id-open (arg ID &optional switchpersist)
  "Switch to another org-roam db and visit file with id arg"
  "If switchpersist is non-nil, stay in the new org-roam db after visiting file"
  (interactive)
  (setq prev-org-roam-db-choice org-roam-db-choice)
  (org-roam-switch-db arg 1)
  (org-roam-id-open ID)
  (when (not switchpersist)
    (org-roam-switch-db prev-org-roam-db-choice 1)))

(defun org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
          (seq-filter
           (org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun org-roam-dailies-apply-old-todos-tags-to-all ()
;  (dolist (daily-node org-roam-dailies-files)
;           (apply-old-todos-tag-maybe-and-save daily-node)
;  )
  (setq num 0)
  (while (< num (list-length (org-roam-list-notes-by-tag "todos")))
    (apply-old-todos-tag-maybe-and-save (nth num (org-roam-list-notes-by-tag "todos")))
  (setq num (1+ num))
  )
)

(defun org-roam-append-notes-to-agenda (tag-name db)
  (org-roam-switch-db db t)
;  (org-roam-dailies-apply-old-todos-tags-to-all)
  (setq org-agenda-files (append org-agenda-files (org-roam-list-notes-by-tag "todos")))
)

(defun org-roam-refresh-agenda-list ()
  (interactive)
  (setq prev-org-roam-db-choice org-roam-db-choice)
  (setq org-agenda-files '())
  (dolist (DB full-org-roam-db-list-pretty)
    (org-roam-append-notes-to-agenda "todos" DB)
  )
  (org-roam-switch-db prev-org-roam-db-choice 1)
)

;; Build the agenda list the first time for the session
(org-roam-refresh-agenda-list)

(map! :leader
      :prefix ("N" . "org-roam notes")
      :desc "Capture new roam node"
      "c" 'org-roam-capture)

(map! :leader
      :prefix ("N" . "org-roam notes")
      :desc "Insert roam node link at point"
      "i" 'org-roam-node-insert)

(map! :leader
      :prefix ("N" . "org-roam notes")
      :desc "Find roam node"
      "." 'org-roam-node-find)

(map! :leader
      :prefix ("N" . "org-roam notes")
      :desc "Switch org-roam database"
      "s" 'org-roam-switch-db)

(map! :leader
      :prefix ("N" . "org-roam notes")
      :desc "Update current org-roam database"
      "u" 'org-roam-db-sync)

(map! :leader
      :prefix ("N" . "org-roam notes")
      :desc "Visualize org-roam database with org-roam-ui"
      "v" 'org-roam-ui-open)

(map! :leader
      :prefix ("N" . "org-roam notes")
      :desc "Re-zoom on current node in org-roam-ui"
      "z" 'org-roam-ui-node-zoom)

(map! :leader
      :prefix ("N" . "org-roam notes")
      :desc "Visualize org-roam database with org-roam-ui"
      "O" 'org-roam-default-overview)

(org-roam-db-autosync-mode)

(after! org-roam
  (setq org-roam-capture-templates
        '(("d" "default" plain "%?" :target
  (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
  :unnarrowed t))))

(use-package org-roam-dblocks
  :hook (org-mode . org-roam-dblocks-autoupdate-mode))

(setq org-id-extra-files 'org-agenda-text-search-extra-files)
#+end_src
** Org Agenda Configuration
#+begin_src emacs-lisp
;;;------ Org agenda configuration ------;;;

;; Set span for agenda
(setq org-agenda-span 1
      org-agenda-start-day "+0d")

;; Set folder for my org agenda files
;(setq org-agenda-files (list "~/Agenda"))

;(dolist (item full-org-roam-db-list)
;  (setq org-agenda-files
;        (append (list (concat item "/Agenda")) org-agenda-files)))

;; Function to be run when org-agenda is opened
(defun org-agenda-open-hook ()
  "Hook to be run when org-agenda is opened"
  )

;; Adds hook to org agenda mode, making follow mode active in org agenda
(add-hook 'org-agenda-mode-hook 'org-agenda-open-hook)

;; Function to list all my available org agenda files and switch to them
(defun list-and-switch-to-agenda-file ()
  "Lists all available agenda files and switches to desired one"
  (interactive)
  (setq full-agenda-file-list nil)
;  (dolist (item org-agenda-files)
;   (if (f-directory-p item)
;    (setq full-agenda-file-list (append (directory-files item t org-agenda-file-regexp) full-agenda-file-list))
;   (setq full-agenda-file-list (append item full-agenda-file-list))))
  (setq choice (completing-read "Select agenda file:" org-agenda-files nil t))
  (find-file choice))

(map! :leader
      :desc "Switch to specific org agenda file"
      "o a s" 'list-and-switch-to-agenda-file)

(map! :leader
      :desc "Open org calendar"
      "o c" #'cfw:open-org-calendar)

(require 'org-super-agenda)

(setq org-super-agenda-groups
       '(;; Each group has an implicit boolean OR operator between its selectors.
         (:name "Home Tech"
                ;; Single arguments given alone
                :and(
                    :file-path "emmet/Agenda"
                    :not (:tag "event"))
                :order 3)
         (:name "Family"
                ;; Single arguments given alone
                :and(
                    :file-path "Family"
                    :not (:tag "event"))
                :order 3)
         (:name "Teaching Prep"
                ;; Single arguments given alone
                :and(
                    :file-path "Teaching.p"
                    :tag "planning"
                    :not (:tag "grading")
                    :not (:tag "event"))
                :order 3)
         (:name "Teaching Secretarial"
                ;; Single arguments given alone
                :and(
                    :file-path "Teaching.p"
                    :tag "secretarial"
                    :not (:tag "grading")
                    :not (:tag "event"))
                :order 3)
         (:name "Teaching Grading"
                ;; Single arguments given alone
                :and(
                    :file-path "Teaching.p"
                    :tag "grading"
                    :not (:tag "planning")
                    :not (:tag "event"))
                :order 3)
         (:name "School Side Projects"
                :and(
                    :file-path "Teaching.p"
                    :tag "tech"
                    :not (:tag "planning")
                    :not (:tag "event"))
                :order 3)
         (:name "Gamedev Current Projects"
                ;; Single arguments given alone
                :and (
                    :file-path "Gamedev"
                    :todo "STRT")
                :order 5)
         (:name "Youtube"
                ;; Single arguments given alone
                :tag "youtube"
                :order 6)
         (:name "Learning"
                ;; Single arguments given alone
                :tag "learning"
                :order 7)
          (:name "Today"  ; Optionally specify section name
                :time-grid t
                :date today
                :scheduled today
                :order 1)
       ))

(org-super-agenda-mode t)

(map! :leader
      :desc "Open org QL view"
      "o q v" #'org-ql-view)

(map! :leader
      :desc "Open org QL view dispatcher"
      "o q d" #'org-ql-view-dispatch)

(map! :desc "Next line"
      :map org-super-agenda-header-map
      "j" 'org-agenda-next-line)

(map! :desc "Next line"
      :map org-super-agenda-header-map
      "k" 'org-agenda-previous-line)
#+end_src
** Org QL Configuration
#+begin_src emacs-lisp
;;;------ Org QL configuration ------;;;
;; This function block by hrehfeld on GitHub
(cl-defun org-dblock-write:my-org-ql (params)
    "Insert content for org-ql dynamic block at point according to PARAMS.
Valid parameters include:
 :scope    The scope to consider for the Org QL query. This can
            be one of the following:
            `buffer'              the current buffer
            `org-agenda-files'    all agenda files
            `org-directory'       all org files
            `(\"path\" ...)'      list of buffer names or file paths
            `all'                 all agenda files, and org-mode buffers

  :query    An Org QL query expression in either sexp or string
            form.

  :columns  A list of columns, including `heading', `todo',
            `property',`priority',`deadline',`scheduled',`closed'.
            Each column may also be specified as a list with the
            second element being a header string.  For example,
            to abbreviate the priority column: (priority \"P\").
            For certain columns, like `property', arguments may
            be passed by specifying the column type itself as a
            list.  For example, to display a column showing the
            values of a property named \"milestone\", with the
            header being abbreviated to \"M\":

              ((property \"milestone\") \"M\").

  :sort     One or a list of Org QL sorting methods
            (see `org-ql-select').

  :take     Optionally take a number of results from the front (a
            positive number) or the end (a negative number) of
            the results.

  :ts-format  Optional format string used to format
              timestamp-based columns.

For example, an org-ql dynamic block header could look like:

  ,#+BEGIN: org-ql :query (todo \"UNDERWAY\") :columns (priority todo heading) :sort (priority date) :ts-format \"%Y-%m-%d %H:%M\""
    (-let* (((&plist :scope :query :columns :sort :ts-format :take) params)
            (query (cl-etypecase query
                     (string (org-ql--query-string-to-sexp query))
                     (list  ;; SAFETY: Query is in sexp form: ask for confirmation, because it could contain arbitrary code.
                      (org-ql--ask-unsafe-query query)
                      query)))
            (columns (or columns '(heading todo (priority "P"))))
            (scope (cond ((and (listp scope) (seq-every-p #'stringp scope)) scope)
                         ((string-equal scope "org-agenda-files") (org-agenda-files))
                         ((or (not scope) (string-equal scope "buffer")) (current-buffer))
                         ((string-equal scope "org-directory") (org-ql-search-directories-files))
                         (t (user-error "Unknown scope '%s'" scope))))
            ;; MAYBE: Custom column functions.
            (format-fns
             ;; NOTE: Backquoting this alist prevents the lambdas from seeing
             ;; the variable `ts-format', so we use `list' and `cons'.
             (list (cons 'todo (lambda (element)
                                 (org-element-property :todo-keyword element)))
                   (cons 'heading (lambda (element)
                                    (cond
                                     ((and org-id-link-to-org-use-id
                                           (org-element-property :ID element))
                                      (org-make-link-string (format "id:%s" (org-element-property :ID element))
                                                            (org-element-property :raw-value element)))
                                     ((org-element-property :file element)
                                      (org-make-link-string (format "file:%s::*%s"
                                                                    (org-element-property :file element)
                                                                    (org-element-property :raw-value element))
                                                            (org-element-property :raw-value element)))
                                     (t (org-make-link-string (org-element-property :raw-value element)
                                                              (org-link-display-format
                                                               (org-element-property :raw-value element)))))
                                    ))
                   (cons 'priority (lambda (element)
                                     (--when-let (org-element-property :priority element)
                                       (char-to-string it))))
                   (cons 'deadline (lambda (element)
                                     (--when-let (org-element-property :deadline element)
                                       (ts-format ts-format (ts-parse-org-element it)))))
                   (cons 'scheduled (lambda (element)
                                      (--when-let (org-element-property :scheduled element)
                                        (ts-format ts-format (ts-parse-org-element it)))))
                   (cons 'closed (lambda (element)
                                   (--when-let (org-element-property :closed element)
                                     (ts-format ts-format (ts-parse-org-element it)))))
                   (cons 'property (lambda (element property)
                                     (org-element-property (intern (concat ":" (upcase property))) element)))))
            (elements (org-ql-query :from scope
                                    :where query
                                    :select '(org-element-put-property (org-element-headline-parser (line-end-position)) :file (buffer-file-name))
                                    :order-by sort)))
      (when take
        (setf elements (cl-etypecase take
                         ((and integer (satisfies cl-minusp)) (-take-last (abs take) elements))
                         (integer (-take take elements)))))
      (cl-labels ((format-element
                   (element) (string-join (cl-loop for column in columns
                                                   collect (or (pcase-exhaustive column
                                                                 ((pred symbolp)
                                                                  (funcall (alist-get column format-fns) element))
                                                                 (`((,column . ,args) ,_header)
                                                                  (apply (alist-get column format-fns) element args))
                                                                 (`(,column ,_header)
                                                                  (funcall (alist-get column format-fns) element)))
                                                               ""))
                                          " | ")))
        ;; Table header
        (insert "| " (string-join (--map (pcase it
                                           ((pred symbolp) (capitalize (symbol-name it)))
                                           (`(,_ ,name) name))
                                         columns)
                                  " | ")
                " |" "\n")
        (insert "|- \n")  ; Separator hline
        (dolist (element elements)
          (insert "| " (format-element element) " |" "\n"))
        (delete-char -1)
        (org-table-align))))
#+end_src
** Magit Configuration
#+begin_src emacs-lisp
;;;------ magit configuration ------;;;

;; Need the following two blocks to make magit work with git bare repos
(defun ~/magit-process-environment (env)
  "Add GIT_DIR and GIT_WORK_TREE to ENV when in a special directory.
https://github.com/magit/magit/issues/460 (@cpitclaudel)."
  (let ((default (file-name-as-directory (expand-file-name default-directory)))
        (home (expand-file-name "~/")))
    (when (string= default home)
      (let ((gitdir (expand-file-name "~/.dotfiles.git/")))
        (push (format "GIT_WORK_TREE=%s" home) env)
        (push (format "GIT_DIR=%s" gitdir) env))))
  env)

(advice-add 'magit-process-environment
            :filter-return #'~/magit-process-environment)
#+end_src
** Dired Configuration
#+begin_src emacs-lisp
;;;------ dired configuration ------;;;

(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

(map! :desc "Increase font size"
      "C-=" 'text-scale-increase)

(map! :desc "Decrease font size"
      "C--" 'text-scale-decrease)
#+end_src
** Ranger Configuration
#+begin_src emacs-lisp
;;;------ ranger configuration ------;;;

(map! :map ranger-mode-map
      :desc "Mark current file"
      "m" 'ranger-mark)

(map! :map ranger-mode-map
      :desc "Toggle mark on current file"
      "x" 'ranger-toggle-mark)

(map! :leader
      :desc "Open ranger"
      "o d" 'ranger)
#+end_src
** Elfeed Configuration
#+begin_src emacs-lisp
;;;------ elfeed configuration ------;;;

(map! :leader
      :desc "Open elfeed"
      "o n" #'elfeed)

(map! :map elfeed-search-mode-map
      :desc "Update all feeds"
      "r" 'elfeed-update)

;; Load elfeed-org
(require 'elfeed-org)

;; Initialize elfeed-org
;; This hooks up elfeed-org to read the configuration when elfeed
;; is started with =M-x elfeed=
(elfeed-org)

;; Optionally specify a number of files containing elfeed
;; configuration. If not set then the location below is used.
;; Note: The customize interface is also supported.
(setq rmh-elfeed-org-files (list "~/Documents/RSS/elfeed.org"))
(setq elfeed-search-filter "@4-weeks-ago +unread ")
#+end_src
** mu4e Configuration
*** Standard mu4e Configuration
#+begin_src emacs-lisp
;;;------ mu4e configuration ------;;;

;; Auto-load mu4e and org-mu4e on start
(require 'mu4e-config)

;; mu4e update command
(setq mu4e-get-mail-command "mbsync -a")

;; Run mu4e update every n seconds
(setq mu4e-update-interval 100)

;; Set maildir for mu4e
(setq mu4e-root-maildir "~/.mail")

;; Set important folders for mu4e
(setq mu4e-sent-folder     "/Sent"
      mu4e-drafts-folder   "/Drafts"
      mu4e-trash-folder    "/Trash")

;; My mu4e headers
(setq mu4e-headers-fields
      '((:from            . 22)
        (:human-date      . 12)
        (:flags           .  6)
        (:maildir         . 30)
        (:thread-subject  . nil)))

;; Following excerpt improves deleting in mu4e

;; Excerpt taken from Gregory J Stein
;; http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/
(defun remove-nth-element (nth list)
  (if (zerop nth) (cdr list)
    (let ((last (nthcdr (1- nth) list)))
      (setcdr last (cddr last))
      list)))
;;(setq mu4e-marks (remove-nth-element 5 mu4e-marks))
;;(add-to-list 'mu4e-marks
;;     '(trash
;;       :char ("d" . "▼")
;;       :prompt "dtrash"
;;       :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
;;       :action (lambda (docid msg target)
;;                 (mu4e~proc-move docid
;;                    (mu4e~mark-check-target target) "-N"))))
#+end_src
** hledger-mode Configuration
#+begin_src emacs-lisp
;;;-- hledger-mode configuration ;;;--

;;; Basic configuration
(require 'hledger-mode)

;; To open files with .journal extension in hledger-mode
(add-to-list 'auto-mode-alist '("\\.journal\\'" . hledger-mode))

;; The default journal location is too opinionated.
(setq hledger-jfile "/home/emmet/Family.s/Roam/hledger.journal")

;;; Auto-completion for account names
;; For company-mode users:
(add-to-list 'company-backends 'hledger-company)

(evil-define-key* 'normal hledger-view-mode-map "q" 'kill-current-buffer)
(evil-define-key* 'normal hledger-view-mode-map "[" 'hledger-prev-report)
(evil-define-key* 'normal hledger-view-mode-map "]" 'hledger-next-report)

(map! :leader
      :prefix ("l" . "hledger")
      :desc "Exec hledger command"
      "c" 'hledger-run-command)

(map! :leader
      :prefix ("l" . "hledger")
      :desc "Generate hledger balancesheet"
      "b" 'hledger-balancesheet*)

(map! :leader
      :prefix ("l" . "hledger")
      :desc "Exec hledger command"
      "d" 'hledger-daily-report*)

(map! :localleader
      :map hledger-mode-map
      :desc "Reschedule transaction at point"
      "d s" 'hledger-reschedule)

(map! :localleader
      :map hledger-mode-map
      :desc "Edit amount at point"
      "t a" 'hledger-edit-amount)
#+end_src
** Centaur Tabs Configuration
#+begin_src emacs-lisp
;;;-- Centaur Tabs configuration ;;;--

;; Ricing tabs
(setq centaur-tabs-set-bar 'under)
(setq centaur-tabs-style "wave")

;; Kbd tab navigation
(map!
  :map evil-normal-state-map
  "H" #'centaur-tabs-backward
  "L" #'centaur-tabs-forward
  "C-<iso-lefttab>" #'centaur-tabs-backward
  "C-<tab>" #'centaur-tabs-forward)

;; Excluded tabs buffer prefixes
(setq centaur-tabs-excluded-prefixes
  '("magit" "*magit-process" "magit-process" "*magit-diff" "magit-diff" "*scratch" "*elfeed-log" "*Messages" "*Ibuffer" "*Native-compile-Log" "*Async-native-compile-log" "*epc" "*helm" "*Helm" " *which" "*Compile-Log*" "*lsp" "*LSP" "*company" "*Flycheck" "*Ediff" "*ediff" "*tramp" " *Mini" "*help" "*straight" " *temp" "*Help" "*compilation"
  "*Calendar" "Calendar"))

;; I personally don't like grouping buffers, it makes things kinda hard to find
(defun centaur-tabs-buffer-groups ()
  "This function: `centaur-tabs-buffer-groups' control buffers' group rules."
  (list
   (cond
    (t
     "Everything")
    (t
     (centaur-tabs-get-group-name (current-buffer))))))

(evil-global-set-key 'normal (kbd "C-w") 'kill-current-buffer)

(centaur-tabs-mode t)
#+end_src
** EAF
#+begin_src emacs-lisp
;;;-- Load emacs application framework;;;--
(use-package! eaf
  :load-path "~/.emacs.d/site-lisp/emacs-application-framework/"
  :init
  :custom
  (eaf-browser-continue-where-left-off t)
  (eaf-browser-enable-adblocker t)
  (browse-url-browser-function 'eaf-open-browser) ;; Make EAF Browser my default browser
  :config
  (defalias 'browse-web #'eaf-open-browser)

  (require 'eaf-file-manager)
  (require 'eaf-music-player)
  (require 'eaf-image-viewer)
  (require 'eaf-camera)
  (require 'eaf-demo)
  (require 'eaf-airshare)
  (require 'eaf-terminal)
  (require 'eaf-markdown-previewer)
  (require 'eaf-video-player)
  (require 'eaf-vue-demo)
  (require 'eaf-file-sender)
  (require 'eaf-pdf-viewer)
  (require 'eaf-mindmap)
  (require 'eaf-netease-cloud-music)
  (require 'eaf-jupyter)
  (require 'eaf-org-previewer)
  (require 'eaf-system-monitor)
  (require 'eaf-rss-reader)
  (require 'eaf-file-browser)
  (require 'eaf-browser)
  (require 'eaf-org)
  (require 'eaf-mail)
  (require 'eaf-git)

  (require 'eaf-evil)
  (define-key key-translation-map (kbd "SPC")
    (lambda (prompt)
      (if (derived-mode-p 'eaf-mode)
          (pcase eaf--buffer-app-name
            ("browser" (if  (string= (eaf-call-sync "eval_function" eaf--buffer-id "is_focus") "True")
                           (kbd "SPC")
                         (kbd eaf-evil-leader-key)))
            ("pdf-viewer" (kbd eaf-evil-leader-key))
            ("image-viewer" (kbd eaf-evil-leader-key))
            (_  (kbd "SPC")))
        (kbd "SPC")))))

(map! :leader
      :desc "Open web browser"
      "o w" #'eaf-open-browser-with-history)
#+end_src
** Load Prvate Config
#+begin_src emacs-lisp
;;;------ Load my private config ------;;;

(load! "~/.doom.d/private.el")
#+end_src
* My [[file:./init.el][init.el]]
** Default Preamble
#+begin_src emacs-lisp
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

;;(use-package-hook! evil
;;  :pre-init
;;  (setq evil-respect-visual-line-mode t) ;; sane j and k behavior
;;  t)
#+end_src
** Doom Package List
#+begin_src emacs-lisp
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +ranger)   ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ibuffer           ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       ;;(:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       cc                ; C > C++ == 1
       ;;clojure           ; java with a lisp
       common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       (haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       lua                 ; one-based indices? one-based indices
       markdown            ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +roam2)      ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       (ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

* My [[file:./packages.el][packages.el]]
** Default Preamble
#+begin_src emacs-lisp
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src
** MELPA/ELPA/emacsmirror Package List
#+begin_src emacs-lisp
(package! org-bullets)
(package! org-super-agenda)
(package! emacsql :pin "c1a4407")
(package! org-roam-ui)
(package! org-roam-nursery :recipe (:repo "https://github.com/chrisbarrett/nursery"))
(package! lister)
(package! org-roam-delve :recipe (:repo "https://github.com/publicimageltd/delve"))
(package! org-download)
(package! org-ql)
(package! org-yt)
(package! toc-org)
(package! all-the-icons-dired)
(package! all-the-icons-completion)
(package! ox-reveal)
(package! hledger-mode)
(package! rainbow-mode)
(package! crdt)
(package! ess)
(package! openwith)
(package! ob-mermaid)
#+end_src
* Publish Script
I keep two literate configs, one which I edit (doom.org) and one that gets published to GitLab (doom-pub.org). I simply keep sensitive information inside of headers with =noexport=, and then export my private doom.org config using the following script:
#+begin_src emacs-lisp
;; Export link below runs this
(org-org-export-to-org)
[[/home/emmet/.doom.d/doom.org_20220910_141453_QgNMtZ.png]]
#+end_src
#+begin_src emacs-lisp
;; Publish link below runs this
(rename-file "./doom.org.org" "doom-pub.org")
#+end_src
[[elisp:(org-org-export-to-org)][Export]]
[[elisp:(rename-file "./doom.org.org" "doom-pub.org" t)][Publish]]
